//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Demo05
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyDataEntities : DbContext
    {
        public MyDataEntities()
            : base("name=MyDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblCliente> tblClientes { get; set; }
        public virtual DbSet<tblVisita> tblVisitas { get; set; }
    
        public virtual ObjectResult<ppGetClienteById_Result> ppGetClienteById(Nullable<int> tipodocumento, string doc)
        {
            var tipodocumentoParameter = tipodocumento.HasValue ?
                new ObjectParameter("tipodocumento", tipodocumento) :
                new ObjectParameter("tipodocumento", typeof(int));
    
            var docParameter = doc != null ?
                new ObjectParameter("Doc", doc) :
                new ObjectParameter("Doc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ppGetClienteById_Result>("ppGetClienteById", tipodocumentoParameter, docParameter);
        }
    
        public virtual int ppInsertCliente(Nullable<int> tipodocumento, string documento, string nombre, string apellidos, Nullable<System.DateTime> fechanacimiento, Nullable<int> sexo, string nota)
        {
            var tipodocumentoParameter = tipodocumento.HasValue ?
                new ObjectParameter("tipodocumento", tipodocumento) :
                new ObjectParameter("tipodocumento", typeof(int));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("documento", documento) :
                new ObjectParameter("documento", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var fechanacimientoParameter = fechanacimiento.HasValue ?
                new ObjectParameter("fechanacimiento", fechanacimiento) :
                new ObjectParameter("fechanacimiento", typeof(System.DateTime));
    
            var sexoParameter = sexo.HasValue ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(int));
    
            var notaParameter = nota != null ?
                new ObjectParameter("nota", nota) :
                new ObjectParameter("nota", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppInsertCliente", tipodocumentoParameter, documentoParameter, nombreParameter, apellidosParameter, fechanacimientoParameter, sexoParameter, notaParameter);
        }
    
        public virtual int ppInsertVisita(Nullable<int> tipodocumento, string documento, string nota, string localidad)
        {
            var tipodocumentoParameter = tipodocumento.HasValue ?
                new ObjectParameter("tipodocumento", tipodocumento) :
                new ObjectParameter("tipodocumento", typeof(int));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("documento", documento) :
                new ObjectParameter("documento", typeof(string));
    
            var notaParameter = nota != null ?
                new ObjectParameter("nota", nota) :
                new ObjectParameter("nota", typeof(string));
    
            var localidadParameter = localidad != null ?
                new ObjectParameter("Localidad", localidad) :
                new ObjectParameter("Localidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppInsertVisita", tipodocumentoParameter, documentoParameter, notaParameter, localidadParameter);
        }
    
        public virtual int ppUpsertCliente(Nullable<int> tipodocumento, string documento, string nombre, string apellidos, Nullable<System.DateTime> fechanacimiento, Nullable<int> sexo, string nota)
        {
            var tipodocumentoParameter = tipodocumento.HasValue ?
                new ObjectParameter("tipodocumento", tipodocumento) :
                new ObjectParameter("tipodocumento", typeof(int));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("documento", documento) :
                new ObjectParameter("documento", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var fechanacimientoParameter = fechanacimiento.HasValue ?
                new ObjectParameter("fechanacimiento", fechanacimiento) :
                new ObjectParameter("fechanacimiento", typeof(System.DateTime));
    
            var sexoParameter = sexo.HasValue ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(int));
    
            var notaParameter = nota != null ?
                new ObjectParameter("nota", nota) :
                new ObjectParameter("nota", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppUpsertCliente", tipodocumentoParameter, documentoParameter, nombreParameter, apellidosParameter, fechanacimientoParameter, sexoParameter, notaParameter);
        }
    }
}
